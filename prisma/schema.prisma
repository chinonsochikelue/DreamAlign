generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid()) @map("_id")
  clerkUserId     String           @unique
  email           String           @unique
  name            String?
  imageUrl        String?
  industry        String?
  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  bio        String?
  experience Int?

  skills      String[]
  assessments Assessment[]
  resume      Resume?
  coverLetter CoverLetter[]
  Chat        Chat[]
}

model Assessment {
  id             String   @id @default(cuid()) @map("_id")
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  quizScore      Float
  questions      Json[]
  category       String
  improvementTip String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model Resume {
  id        String   @id @default(cuid()) @map("_id")
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  content   String // removed @db.Text
  atsScore  Float?
  feedback  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CoverLetter {
  id             String   @id @default(cuid()) @map("_id")
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  content        String
  jobDescription String?
  companyName    String
  jobTitle       String
  status         String   @default("draft")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model IndustryInsight {
  id                   String   @id @default(cuid()) @map("_id")
  industry             String   @unique
  users                User[]
  salaryRanges         Json[]
  growthRate           Float
  demandLevel          String
  topSkills            String[]
  marketOutlook        String
  keyTrends            String[]
  recommendedSkills    String[]
  marketTrends         Json[]
  topRoles             Json[]
  geographicalInsights Json[]
  jobListings          Json[]
  learningSources      Json[]
  industryChallenges   Json[]
  investmentTrends     Json[]

  lastUpdated DateTime @default(now())
  nextUpdate  DateTime
}

model Chat {
  id        String    @id @default(cuid()) @map("_id")
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
}

model Message {
  id        String   @id @default(cuid()) @map("_id")
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  role      String // "user" or "assistant"
  content   String
  createdAt DateTime @default(now())
}
